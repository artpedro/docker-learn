# mantendo arquivos específicos em cada imagem

docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"

# inicia um container de ubuntu e inicia o bash shell chamando os dois comandos acima
# shuf escolhe um número de 1 a 10000 e armazena em /data.txt
# tail mantém o container aberto por conta da flag -f

docker exec <id> cat /data.txt

# vai executar o seguinte comando dentro do container
# o resultado esperado é um número aleatório

# se você executar outra imagem de ubuntu e checar a / do sistema, não haverá nenhum data.txt

docker run -it ubuntu ls /

docker rm -f <id>
# para não ocupar espaço

# volumes: conecta diretórios do container com diretórios da maquina host
# mounting: criar um volume e vincula-lo a um diretório

docker volume create todo-db

#Usage:  docker volume COMMAND

#Manage volumes

#Commands:
#  create      Create a volume
#  inspect     Display detailed information on one or more volumes
#  ls          List volumes
#  prune       Remove all unused local volumes
#  rm          Remove one or more volumes
#  update      Update a volume (cluster volumes only)

docker run -dp 3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started

#cria e executa um container na porta 3000 baseado na imagem getting-started
#com o volume todo-db presente na pasta /etc/todos

docker rm -f <id>

docker run -dp 3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started

#as alterações feitas no primeiro container permanecerão nesse

docker volume inspect

output:
[
    {
        "CreatedAt": "2023-06-05T10:34:02-03:00",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/todo-db/_data",
        "Name": "todo-db",
        "Options": null,
        "Scope": "local"
    }
]


